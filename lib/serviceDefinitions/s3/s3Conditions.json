{
    "aws:RequestTag/${TagKey}": {
        "condition": "aws:RequestTag/${TagKey}",
        "description": "Filters access by the tags that are passed in the request",
        "type": "String"
    },
    "aws:ResourceTag/${TagKey}": {
        "condition": "aws:ResourceTag/${TagKey}",
        "description": "Filters access by the tags associated with the resource",
        "type": "String"
    },
    "aws:TagKeys": {
        "condition": "aws:TagKeys",
        "description": "Filters access by the tag keys that are passed in the request",
        "type": "ArrayOfString"
    },
    "s3:AccessPointNetworkOrigin": {
        "condition": "s3:AccessPointNetworkOrigin",
        "description": "Filters access by the network origin (Internet or VPC)",
        "type": "String"
    },
    "s3:DataAccessPointAccount": {
        "condition": "s3:DataAccessPointAccount",
        "description": "Filters access by the AWS Account ID that owns the access point",
        "type": "String"
    },
    "s3:DataAccessPointArn": {
        "condition": "s3:DataAccessPointArn",
        "description": "Filters access by an access point Amazon Resource Name (ARN)",
        "type": "String"
    },
    "s3:ExistingJobOperation": {
        "condition": "s3:ExistingJobOperation",
        "description": "Filters access by operation to updating the job priority",
        "type": "String"
    },
    "s3:ExistingJobPriority": {
        "condition": "s3:ExistingJobPriority",
        "description": "Filters access by priority range to cancelling existing jobs",
        "type": "Numeric"
    },
    "s3:ExistingObjectTag/<key>": {
        "condition": "s3:ExistingObjectTag/<key>",
        "description": "Filters access by existing object tag key and value",
        "type": "String"
    },
    "s3:JobSuspendedCause": {
        "condition": "s3:JobSuspendedCause",
        "description": "Filters access by a specific job suspended cause (for example, AWAITING_CONFIRMATION) to cancelling suspended jobs",
        "type": "String"
    },
    "s3:RequestJobOperation": {
        "condition": "s3:RequestJobOperation",
        "description": "Filters access by operation to creating jobs",
        "type": "String"
    },
    "s3:RequestJobPriority": {
        "condition": "s3:RequestJobPriority",
        "description": "Filters access by priority range to creating new jobs",
        "type": "Numeric"
    },
    "s3:RequestObjectTag/<key>": {
        "condition": "s3:RequestObjectTag/<key>",
        "description": "Filters access by the tag keys and values to be added to objects",
        "type": "String"
    },
    "s3:RequestObjectTagKeys": {
        "condition": "s3:RequestObjectTagKeys",
        "description": "Filters access by the tag keys to be added to objects",
        "type": "ArrayOfString"
    },
    "s3:ResourceAccount": {
        "condition": "s3:ResourceAccount",
        "description": "Filters access by the resource owner AWS account ID",
        "type": "String"
    },
    "s3:TlsVersion": {
        "condition": "s3:TlsVersion",
        "description": "Filters access by the TLS version used by the client",
        "type": "Numeric"
    },
    "s3:authType": {
        "condition": "s3:authType",
        "description": "Filters access by authentication method",
        "type": "String"
    },
    "s3:delimiter": {
        "condition": "s3:delimiter",
        "description": "Filters access by delimiter parameter",
        "type": "String"
    },
    "s3:locationconstraint": {
        "condition": "s3:locationconstraint",
        "description": "Filters access by a specific Region",
        "type": "String"
    },
    "s3:maxKeys": {
        "condition": "s3:max-keys",
        "description": "Filters access by maximum number of keys returned in a ListBucket request",
        "type": "Numeric"
    },
    "s3:objectLockLegalHold": {
        "condition": "s3:object-lock-legal-hold",
        "description": "Filters access by object legal hold status",
        "type": "String"
    },
    "s3:objectLockMode": {
        "condition": "s3:object-lock-mode",
        "description": "Filters access by object retention mode (COMPLIANCE or GOVERNANCE)",
        "type": "String"
    },
    "s3:objectLockRemainingRetentionDays": {
        "condition": "s3:object-lock-remaining-retention-days",
        "description": "Filters access by remaining object retention days",
        "type": "Numeric"
    },
    "s3:objectLockRetainUntilDate": {
        "condition": "s3:object-lock-retain-until-date",
        "description": "Filters access by object retain-until date",
        "type": "Date"
    },
    "s3:prefix": {
        "condition": "s3:prefix",
        "description": "Filters access by key name prefix",
        "type": "String"
    },
    "s3:signatureAge": {
        "condition": "s3:signatureAge",
        "description": "Filters access by the age in milliseconds of the request signature",
        "type": "Numeric"
    },
    "s3:signatureversion": {
        "condition": "s3:signatureversion",
        "description": "Filters access by the version of AWS Signature used on the request",
        "type": "String"
    },
    "s3:versionid": {
        "condition": "s3:versionid",
        "description": "Filters access by a specific object version",
        "type": "String"
    },
    "s3:xAmzAcl": {
        "condition": "s3:x-amz-acl",
        "description": "Filters access by canned ACL in the request's x-amz-acl header",
        "type": "String"
    },
    "s3:xAmzContentSha256": {
        "condition": "s3:x-amz-content-sha256",
        "description": "Filters access by unsigned content in your bucket",
        "type": "String"
    },
    "s3:xAmzCopySource": {
        "condition": "s3:x-amz-copy-source",
        "description": "Filters access by copy source bucket, prefix, or object in the copy object requests",
        "type": "String"
    },
    "s3:xAmzGrantFullControl": {
        "condition": "s3:x-amz-grant-full-control",
        "description": "Filters access by x-amz-grant-full-control (full control) header",
        "type": "String"
    },
    "s3:xAmzGrantRead": {
        "condition": "s3:x-amz-grant-read",
        "description": "Filters access by x-amz-grant-read (read access) header",
        "type": "String"
    },
    "s3:xAmzGrantReadAcp": {
        "condition": "s3:x-amz-grant-read-acp",
        "description": "Filters access by the x-amz-grant-read-acp (read permissions for the ACL) header",
        "type": "String"
    },
    "s3:xAmzGrantWrite": {
        "condition": "s3:x-amz-grant-write",
        "description": "Filters access by the x-amz-grant-write (write access) header",
        "type": "String"
    },
    "s3:xAmzGrantWriteAcp": {
        "condition": "s3:x-amz-grant-write-acp",
        "description": "Filters access by the x-amz-grant-write-acp (write permissions for the ACL) header",
        "type": "String"
    },
    "s3:xAmzMetadataDirective": {
        "condition": "s3:x-amz-metadata-directive",
        "description": "Filters access by object metadata behavior (COPY or REPLACE) when objects are copied",
        "type": "String"
    },
    "s3:xAmzObjectOwnership": {
        "condition": "s3:x-amz-object-ownership",
        "description": "Filters access by Object Ownership",
        "type": "String"
    },
    "s3:xAmzServerSideEncryption": {
        "condition": "s3:x-amz-server-side-encryption",
        "description": "Filters access by server-side encryption",
        "type": "String"
    },
    "s3:xAmzServerSideEncryptionAwsKmsKeyId": {
        "condition": "s3:x-amz-server-side-encryption-aws-kms-key-id",
        "description": "Filters access by AWS KMS customer managed CMK for server-side encryption",
        "type": "String"
    },
    "s3:xAmzServerSideEncryptionCustomerAlgorithm": {
        "condition": "s3:x-amz-server-side-encryption-customer-algorithm",
        "description": "Filters access by customer specified algorithm for server-side encryption",
        "type": "String"
    },
    "s3:xAmzStorageClass": {
        "condition": "s3:x-amz-storage-class",
        "description": "Filters access by storage class",
        "type": "String"
    },
    "s3:xAmzWebsiteRedirectLocation": {
        "condition": "s3:x-amz-website-redirect-location",
        "description": "Filters access by a specific website redirect location for buckets that are configured as static websites",
        "type": "String"
    }
}