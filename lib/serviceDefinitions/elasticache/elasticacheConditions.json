{
    "aws:RequestTag/${TagKey}": {
        "condition": "aws:RequestTag/${TagKey}",
        "description": "Filters actions based on the tags that are passed in the request",
        "type": "String"
    },
    "aws:ResourceTag/${TagKey}": {
        "condition": "aws:ResourceTag/${TagKey}",
        "description": "Filters actions based on the tags associated with the resource",
        "type": "String"
    },
    "aws:TagKeys": {
        "condition": "aws:TagKeys",
        "description": "Filters actions based on the tag keys that are passed in the request",
        "type": "ArrayOfString"
    },
    "elasticache:AtRestEncryptionEnabled": {
        "condition": "elasticache:AtRestEncryptionEnabled",
        "description": "Filters access by the AtRestEncryptionEnabled parameter present in the request or default false value if parameter is not present",
        "type": "Bool"
    },
    "elasticache:AuthTokenEnabled": {
        "condition": "elasticache:AuthTokenEnabled",
        "description": "Filters access by the presence of non empty AuthToken parameter in the request",
        "type": "Bool"
    },
    "elasticache:AutomaticFailoverEnabled": {
        "condition": "elasticache:AutomaticFailoverEnabled",
        "description": "Filters access by the AutomaticFailoverEnabled parameter in the request",
        "type": "Bool"
    },
    "elasticache:CacheNodeType": {
        "condition": "elasticache:CacheNodeType",
        "description": "Filters access by the cacheNodeType parameter present in the request. This key can be used to restrict which cache node types can be used on cluster creation or scaling operations",
        "type": "String"
    },
    "elasticache:CacheParameterGroupName": {
        "condition": "elasticache:CacheParameterGroupName",
        "description": "Filters access by the the CacheParameterGroupName parameter in the request",
        "type": "String"
    },
    "elasticache:ClusterModeEnabled": {
        "condition": "elasticache:ClusterModeEnabled",
        "description": "Filters access by the cluster mode parameter present in the request. Default value for single node group (shard) creations is false",
        "type": "Bool"
    },
    "elasticache:EngineType": {
        "condition": "elasticache:EngineType",
        "description": "Filters access by the engine type present in creation requests. For replication group creations, default engine ‘redis’ is used as key if parameter is not present",
        "type": "String"
    },
    "elasticache:EngineVersion": {
        "condition": "elasticache:EngineVersion",
        "description": "Filters access by the engineVersion parameter present in creation or cluster modification requests",
        "type": "String"
    },
    "elasticache:KmsKeyId": {
        "condition": "elasticache:KmsKeyId",
        "description": "Filters access by the KmsKeyId parameter in the request",
        "type": "String"
    },
    "elasticache:MultiAZEnabled": {
        "condition": "elasticache:MultiAZEnabled",
        "description": "Filters access by the AZMode parameter, MultiAZEnabled parameter or the number of availability zones that the cluster or replication group can be placed in",
        "type": "Bool"
    },
    "elasticache:NumNodeGroups": {
        "condition": "elasticache:NumNodeGroups",
        "description": "Filters access by the NumNodeGroups or NodeGroupCount parameter specified in the request. This key can be used to restrict the number of node groups (shards) clusters can have after creation or scaling operations",
        "type": "Numeric"
    },
    "elasticache:ReplicasPerNodeGroup": {
        "condition": "elasticache:ReplicasPerNodeGroup",
        "description": "Filters access by the number of replicas per node group (shards) specified in creations or scaling requests",
        "type": "Numeric"
    },
    "elasticache:SnapshotRetentionLimit": {
        "condition": "elasticache:SnapshotRetentionLimit",
        "description": "Filters access by the SnapshotRetentionLimit parameter in the request",
        "type": "Numeric"
    },
    "elasticache:TransitEncryptionEnabled": {
        "condition": "elasticache:TransitEncryptionEnabled",
        "description": "Filters access by the TransitEncryptionEnabled parameter present in the request or default false value if parameter is not present",
        "type": "Bool"
    }
}